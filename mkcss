#!/usr/bin/python3
#
#	screen2html - Convert ANSI-color containing terminal output to HTML.
#	Copyright (C) 2017-2017 Johannes Bauer
#
#	This file is part of screen2html.
#
#	screen2html is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	screen2html is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with screen2html; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>
#

import sys
import configparser
import colorsys
from FriendlyArgumentParser import FriendlyArgumentParser

parser = FriendlyArgumentParser()
parser.add_argument("-p", "--palette", metavar = "configfile", type = str, default = "palette.ini", help = "Specifies the palette file that is read in. Defaults to %(default)s.")
parser.add_argument("-s", "--scheme", metavar = "name", type = str, default = "tango", help = "Color scheme to pick from palette file. Defaults to %(default)s.")
parser.add_argument("-c", "--classname", metavar = "class", type = str, default = "xterm", help = "HTML class name that will be used in CSS. Defaults to %(default)s.")
parser.add_argument("-b", "--bgcolor", metavar = "index", type = int, default = 0, help = "Background color index that is assumed as default. Defaults to %(default)d (black).")
parser.add_argument("-f", "--fgcolor", metavar = "index", type = int, default = 7, help = "Foreground color index that is assumed as default. Defaults to %(default)d (white).")
args = parser.parse_args(sys.argv[1:])

config = configparser.ConfigParser()
config.read(args.palette)

css = dict(vars(args))
css["foreground"] = config[args.scheme]["col" + str(args.fgcolor)]
css["background"] = config[args.scheme]["col" + str(args.bgcolor)]
print("""\
pre.%(classname)s {
	color: #%(foreground)s;
	background-color: #%(background)s;
	padding: 20px;
	border: 1px dotted white;
	white-space: pre-wrap;
}
""" % css)
print("pre.%s > span.italics { font-style: italic; }" % (args.classname))
print("pre.%s > span.underline { text-decoration: underline; }" % (args.classname))

def _clamp(value):
	if value < 0:
		value = 0
	elif value > 255:
		value = 255
	return value

def brighten(color):
	rgb = (int(color[0 : 2], 16), int(color[2 : 4], 16), int(color[4 : 6], 16))
	(h, s, v) = colorsys.rgb_to_hsv(*rgb)
	v = _clamp(v + 40)
	rgb = [ _clamp(round(value)) for value in colorsys.hsv_to_rgb(h, s, v) ]
	return "".join("%02x" % (value) for value in rgb)

for index in range(16):
	colname = "col%d" % (index)
	color = config[args.scheme][colname]
	print("pre.%s > span.f%d { color: #%s; }" % (args.classname, index, color))
	print("pre.%s > span.F%d { color: #%s; }" % (args.classname, index, brighten(color)))
	print("pre.%s > span.b%d { background-color: #%s; }" % (args.classname, index, color))
	print("pre.%s > span.B%d { background-color: #%s; }" % (args.classname, index, brighten(color)))

