#!/usr/bin/python3
#
#	screen2html - Convert ANSI-color containing terminal output to HTML.
#	Copyright (C) 2017-2017 Johannes Bauer
#
#	This file is part of screen2html.
#
#	screen2html is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	screen2html is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with screen2html; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>
#

import sys
from FriendlyArgumentParser import FriendlyArgumentParser
from ANSIInterpreter import ANSIInterpreter

parser = FriendlyArgumentParser()
parser.add_argument("--complete-html", action = "store_true", help = "Generate a complete HTML file that can be directly rendered in the browser.")
parser.add_argument("--css-filename", metavar = "filename", type = str, default = "terminal-tango.css", help = "When generating a complete HTML file, specifies the filename of the CSS to include. Defaults to %(default)s.")
parser.add_argument("--css-verbatim", action = "store_true", help = "When generating a complete HTML file, include the specified CSS file verbatim, i.e., inside the HTML via <style>, instead of by a <link> reference.")
parser.add_argument("-c", "--classname", metavar = "class", type = str, default = "xterm", help = "CSS class to use in HTML for terminal <pre>. Defaults to %(default)s.")
parser.add_argument("logfile", metavar = "filename", type = str, help = "Screen logfile that should be converted to HTML.")
args = parser.parse_args(sys.argv[1:])

with open(args.logfile) as f:
	logfile = f.read()

ansi = ANSIInterpreter()
ansi.parse(logfile)

content = "<pre class=\"%s\">\n" % (args.classname)
content += ansi.html
content += "</pre>"

if args.complete_html:

	if args.css_verbatim:
		css = "<style>\n"
		with open(args.css_filename) as f:
			css += f.read()
		css += "</style>"
	else:
		css = "<link rel=\"stylesheet\" href=\"%s\" />" % (args.css_filename)
	
	html_args = dict(vars(args))
	html_args["css"] = css
	html_args["content"] = content

	print("""\
<html>
	<head>
		%(css)s
	</head>

	<body>
%(content)s
	</body>
</html>""" % html_args)
else:
	print(content)
